{"ast":null,"code":"var _jsxFileName = \"/Users/ojunseo/dev/stokers/frontend/myapp/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React from \"react\";\nimport jwtDecode from './utils/jwtDecode';\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Login from \"./components/LoginFrame\";\nimport Register from './components/Register';\nimport Test from './Test.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(); // Context 생성\n\nfunction App() {\n  _s();\n  const [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null); // localStorage에 authTokens이 있을 경우 가져와서 authTokens에 넣는다.\n\n  const [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwtDecode(localStorage.getItem(\"authTokens\")) : null); // localStorage에 authTokens이 있을 경우 jwt_decode로 authTokens를 decode해서 user 정보에 넣는다.\n  const [loading, setLoading] = useState(true);\n  const loginUser = async (username, password) => {\n    console.log(\"로그인 함수 호출됨.\");\n    const response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n\n    // 로그인에 성공했을 경우 홈으로 이동\n    if (response.status === 200) {\n      console.log(\"로그인 성공\");\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      console.log(\"로그인 에러\");\n    }\n  };\n  const refreshUser = async username => {\n    console.log(\"리프레시 진행중.\");\n    console.log(username);\n    const response = await fetch(\"http://127.0.0.1:8000/api/refresh/\" + username, {\n      method: \"GET\"\n    });\n    const data = await response.json();\n  };\n  const registerUser = async (username, email, nickname, password, password2) => {\n    console.log(\"회원가입 함수 호출됨.\");\n    const response = await fetch(\"http://127.0.0.1:8000/api/register/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        nickname,\n        email,\n        password,\n        password2\n      })\n    });\n    if (response.status === 201) {\n      console.log(\"회원가입 완료\");\n    } else if (response.status === 400) {\n      console.log(\"회원가입 실패 - 이미 있는 아이디입니다.\");\n    } else {\n      console.log(\"회원가입 실패\");\n    }\n  };\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n  const contextData = {\n    user,\n    setUser,\n    authTokens,\n    setAuthTokens,\n    registerUser,\n    //회원가입\n    loginUser,\n    //로그인\n    logoutUser,\n    refreshUser\n  };\n  useEffect(() => {\n    console.log(contextData);\n    if (authTokens) {\n      setUser(jwtDecode(authTokens.access));\n    }\n    setLoading(false);\n    if (user) {\n      refreshUser(user.username);\n    }\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n        value: contextData,\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 29\n            }, this),\n            path: \"/register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"N3u0RNpe3uiUC8E6gNJAMK27wDg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jwtDecode","createContext","useState","useEffect","useNavigate","BrowserRouter","Router","Route","Routes","Login","Register","Test","jsxDEV","_jsxDEV","AuthContext","App","_s","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","loginUser","username","password","console","log","response","fetch","method","headers","body","stringify","data","json","status","access","setItem","refreshUser","registerUser","email","nickname","password2","logoutUser","removeItem","contextData","children","Provider","value","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ojunseo/dev/stokers/frontend/myapp/src/App.js"],"sourcesContent":["// App.js\nimport React from \"react\";\nimport jwtDecode from './utils/jwtDecode';\nimport { createContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nimport Login from \"./components/LoginFrame\";\nimport Register from './components/Register';\nimport Test from './Test.js';\n\nexport const AuthContext = createContext(); // Context 생성\n\nfunction App() {\n  const [authTokens, setAuthTokens] = useState(() =>\n  localStorage.getItem(\"authTokens\")\n    ? JSON.parse(localStorage.getItem(\"authTokens\"))\n    : null\n  ); // localStorage에 authTokens이 있을 경우 가져와서 authTokens에 넣는다.\n\n  const [user, setUser] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n      ? jwtDecode(localStorage.getItem(\"authTokens\"))\n      : null\n  ); // localStorage에 authTokens이 있을 경우 jwt_decode로 authTokens를 decode해서 user 정보에 넣는다.\n  const [loading, setLoading] = useState(true);\n\n  const loginUser = async (username, password) => {\n    console.log(\"로그인 함수 호출됨.\")\n    const response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n  \n    // 로그인에 성공했을 경우 홈으로 이동\n    if (response.status === 200) {\n      console.log(\"로그인 성공\")\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n  \n    } else {\n      console.log(\"로그인 에러\")\n    }\n  };\n  \n  const refreshUser = async (username) => {\n    console.log(\"리프레시 진행중.\");\n    console.log(username);\n    const response = await fetch(\"http://127.0.0.1:8000/api/refresh/\"+username, {\n      method: \"GET\"\n    });\n    const data = await response.json();\n  }\n  \n  const registerUser = async (username,email, nickname , password, password2) => {\n    console.log(\"회원가입 함수 호출됨.\")\n    \n    const response = await fetch(\"http://127.0.0.1:8000/api/register/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        nickname,\n        email,\n        password,\n        password2\n      })\n    });\n    if (response.status === 201) {\n      console.log(\"회원가입 완료\");\n    } else if (response.status === 400){\n      console.log(\"회원가입 실패 - 이미 있는 아이디입니다.\")\n    } else {\n      console.log(\"회원가입 실패\")\n    }\n  };\n  \n  \n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n  \n  const contextData = {\n    user,\n    setUser,\n    authTokens,\n    setAuthTokens,\n    registerUser, //회원가입\n    loginUser, //로그인\n    logoutUser,\n    refreshUser\n  };\n  \n  useEffect(() => {\n    console.log(contextData)\n    if (authTokens) {\n      setUser(jwtDecode(authTokens.access));\n    }\n    setLoading(false);\n  \n    if (user){\n      refreshUser(user.username);\n    }\n  }, [authTokens, loading]);\n    \n  return (\n    <div>\n      <Router>\n        <AuthContext.Provider value={contextData}>\n          <Routes>\n            <Route path=\"/\" element={<Test />} />\n            <Route path=\"/login\" element={<Login />}  />\n            <Route element={<Register />} path=\"/register\" />\n          </Routes>\n        </AuthContext.Provider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}