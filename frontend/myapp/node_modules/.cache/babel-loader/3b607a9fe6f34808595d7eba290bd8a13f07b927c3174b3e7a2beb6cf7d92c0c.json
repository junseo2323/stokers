{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';\nconst Api = () => {\n  _s();\n  const [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null); // localStorage에 authTokens이 있을 경우 가져와서 authTokens에 넣는다.\n\n  const [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwtDecode(localStorage.getItem(\"authTokens\")) : null); // localStorage에 authTokens이 있을 경우 jwt_decode로 authTokens를 decode해서 user 정보에 넣는다.\n  const [loading, setLoading] = useState(true);\n  const loginUser = async (username, password) => {\n    console.log(\"로그인 함수 호출됨.\");\n    const response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    const data = await response.json();\n\n    // 로그인에 성공했을 경우 홈으로 이동\n    if (response.status === 200) {\n      console.log(\"로그인 성공\");\n      setAuthTokens(data);\n      setUser(jwtDecode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      console.log(\"로그인 에러\");\n    }\n  };\n  const refreshUser = async username => {\n    console.log(\"리프레시 진행중.\");\n    console.log(username);\n    const response = await fetch(\"http://127.0.0.1:8000/api/refresh/\" + username, {\n      method: \"GET\"\n    });\n    const data = await response.json();\n  };\n  const registerUser = async (username, email, nickname, password, password2) => {\n    console.log(\"회원가입 함수 호출됨.\");\n    const response = await fetch(\"http://127.0.0.1:8000/api/register/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        nickname,\n        email,\n        password,\n        password2\n      })\n    });\n    if (response.status === 201) {\n      console.log(\"회원가입 완료\");\n    } else if (response.status === 400) {\n      console.log(\"회원가입 실패 - 이미 있는 아이디입니다.\");\n    } else {\n      console.log(\"회원가입 실패\");\n    }\n  };\n  const logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n  useEffect(() => {\n    console.log(contextData);\n    if (authTokens) {\n      setUser(jwtDecode(authTokens.access));\n    }\n    setLoading(false);\n    if (user) {\n      refreshUser(user.username);\n    }\n  }, [authTokens, loading]);\n  const contextData = {\n    user,\n    setUser,\n    authTokens,\n    setAuthTokens,\n    registerUser,\n    //회원가입\n    loginUser,\n    //로그인\n    logoutUser,\n    refreshUser\n  };\n  return contextData;\n};\n_s(Api, \"a9Ey1gvHPJdTGVfPjFHL4nw0ryY=\");\n_c = Api;\nconst AuthContext = /*#__PURE__*/createContext(Api.contextData);\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"Api\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","Api","_s","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","loading","setLoading","loginUser","username","password","console","log","response","fetch","method","headers","body","stringify","data","json","status","access","setItem","refreshUser","registerUser","email","nickname","password2","logoutUser","removeItem","contextData","_c","AuthContext","$RefreshReg$"],"sources":["/Users/ojunseo/dev/stokers/frontend/myapp/src/utils/user-Api.js"],"sourcesContent":["import React, { createContext,useState,useEffect } from 'react';\nimport {jwtDecode} from 'jwt-decode';\n\nconst Api = () => {\n    const [authTokens, setAuthTokens] = useState(() =>\n    localStorage.getItem(\"authTokens\")\n        ? JSON.parse(localStorage.getItem(\"authTokens\"))\n        : null\n    ); // localStorage에 authTokens이 있을 경우 가져와서 authTokens에 넣는다.\n\n    const [user, setUser] = useState(() =>\n        localStorage.getItem(\"authTokens\")\n        ? jwtDecode(localStorage.getItem(\"authTokens\"))\n        : null\n    ); // localStorage에 authTokens이 있을 경우 jwt_decode로 authTokens를 decode해서 user 정보에 넣는다.\n    const [loading, setLoading] = useState(true);\n\n    const loginUser = async (username, password) => {\n        console.log(\"로그인 함수 호출됨.\")\n        const response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            username,\n            password\n        })\n        });\n        const data = await response.json();\n    \n        // 로그인에 성공했을 경우 홈으로 이동\n        if (response.status === 200) {\n        console.log(\"로그인 성공\")\n        setAuthTokens(data);\n        setUser(jwtDecode(data.access));\n        localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    \n        } else {\n        console.log(\"로그인 에러\")\n        }\n    };\n    \n    const refreshUser = async (username) => {\n        console.log(\"리프레시 진행중.\");\n        console.log(username);\n        const response = await fetch(\"http://127.0.0.1:8000/api/refresh/\"+username, {\n        method: \"GET\"\n        });\n        const data = await response.json();\n    }\n    \n    const registerUser = async (username,email, nickname , password, password2) => {\n        console.log(\"회원가입 함수 호출됨.\")\n        \n        const response = await fetch(\"http://127.0.0.1:8000/api/register/\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            username,\n            nickname,\n            email,\n            password,\n            password2\n        })\n                });\n        if (response.status === 201) {\n        console.log(\"회원가입 완료\");\n        } else if (response.status === 400){\n        console.log(\"회원가입 실패 - 이미 있는 아이디입니다.\")\n        } else {\n        console.log(\"회원가입 실패\")\n        }\n    };\n    \n    \n    const logoutUser = () => {\n        setAuthTokens(null);\n        setUser(null);\n        localStorage.removeItem(\"authTokens\");\n    };\n    \n    useEffect(() => {\n        console.log(contextData)\n        if (authTokens) {\n        setUser(jwtDecode(authTokens.access));\n        }\n        setLoading(false);\n    \n        if (user){\n        refreshUser(user.username);\n        }\n    }, [authTokens, loading]);\n    \n    const contextData = {\n        user,\n        setUser,\n        authTokens,\n        setAuthTokens,\n        registerUser, //회원가입\n        loginUser, //로그인\n        logoutUser,\n        refreshUser\n    };\n\n    return contextData;\n};\n\nconst AuthContext = createContext(Api.contextData);\n\nexport default AuthContext;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}